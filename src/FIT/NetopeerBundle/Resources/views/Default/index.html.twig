{#
@author David Alexa <alexa.david@me.com>

Copyright (C) 2012-2013 CESNET

LICENSE TERMS

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.
3. Neither the name of the Company nor the names of its contributors
  may be used to endorse or promote products derived from this
  software without specific prior written permission.

ALTERNATIVELY, provided that this notice is retained in full, this
product may be distributed under the terms of the GNU General Public
License (GPL) version 2 or later, in which case the provisions
of the GPL apply INSTEAD OF those given above.

This software is provided ``as is'', and any express or implied
warranties, including, but not limited to, the implied warranties of
merchantability and fitness for a particular purpose are disclaimed.
In no event shall the company or contributors be liable for any
direct, indirect, incidental, special, exemplary, or consequential
damages (including, but not limited to, procurement of substitute
goods or services; loss of use, data, or profits; or business
interruption) however caused and on any theory of liability, whether
in contract, strict liability, or tort (including negligence or
otherwise) arising in any way out of the use of this software, even
if advised of the possibility of such damage.
#}

{% extends 'FITNetopeerBundle::layout.html.twig' %}

{% block javascripts %}
	{% if (getSchemaWithAjax is defined and getSchemaWithAjax == true) %}
		{#% set idForAjaxGetSchema = 0 %#}
		<script type="text/javascript">
			$(document).ready(function() {
				var idForAjaxGetSchema = {{ idForAjaxGetSchema }};
				var targetConfigure = $("#row-" + idForAjaxGetSchema + " .configure");
				targetConfigure.find('> a').hide();
				$("<span/>", {
					'class': 'loading',
					text: "Loading..."
				}).appendTo(targetConfigure);
				$.get("{{ path("getSchema", {"key": idForAjaxGetSchema} ) }}", function(data) {
					var dataArr = $.parseJSON(data);
					targetConfigure.find(".loading").remove();
					targetConfigure.find("> a").show();
					if (dataArr['message']) {
						var flash = prepareFlashMessage(dataArr['status'], dataArr['message']);
						$("#block--alerts").append($(flash));
					}
					reloadHistoryOfConnectedDevices();
					if (dataArr['status'] == "success") {
						getNotifWebSocket(idForAjaxGetSchema, "{{ sessionHash }}", "ws://{{ app.request.host }}:8080/");
					}
				});
			});
		</script>
	{% endif %}
	<script type="text/javascript">
		$(document).ready(function() {
			setIndexActions();
		});

		function setIndexActions() {
			setLeftPaneHeight();
			reloadHistoryOfConnectedDevices();
			reloadProfilesOfConnectedDevices();
		}

		$(window).resize(function() {
			setLeftPaneHeight();
		});

		function prepareFlashMessage(status, message) {
			var flashMessage = $("<div/>", {
				"class": "message " + status
			});
			flashMessage.text(message);
			flashMessage.prepend($("<span/>").addClass('circle'));
			flashMessage.prepend($("<span/>").addClass('close').text('X'));
			return flashMessage;
		}

		function setLeftPaneHeight() {
			$("#history-and-profiles").height($(window).height() - parseInt($("#block--leftColumn").css('padding-top'), 10));
		}

		function delegateAnchorActions($elem) {
			$elem.delegate(".icon", 'click', function($e) {
				$e.preventDefault();
				var $target = $($e.target);
				$.get($target.data().action, function(data) {
					var jsonArr = $.parseJSON(data);
					if (jsonArr['result'] === 0) {
						if ($target.hasClass('delete')) {
							$target.parents('a.device-item').unbind('click').remove();
							if ($elem.attr('id') == "block--profilesOfConnectedDevices") {
								reloadProfilesOfConnectedDevices(true);
							}
						} else if ($target.hasClass('addToProfiles')) {
							reloadProfilesOfConnectedDevices(true);
						}
					}
					if (jsonArr['message']) {
						var flash = prepareFlashMessage(jsonArr['status'], jsonArr['message']);
						$("#block--alerts").append($(flash));
					}
				});
			}).delegate("a.device-item", 'click', function($e) {
				$e.preventDefault();

				var $target = $($e.target);
				if (!$target.hasClass('icon')) {
					updateConnectFormValues($(this));
				}
			})
		}

		function reloadHistoryOfConnectedDevices(force) {
			$.ajax({
				url: "{{ path("historyOfConnectedDevices") }}",
				dataType: "json",
				success: function(data) {
					if (!$("#block--historyOfConnectedDevices").length || force === true) {
						$("#block--historyOfConnectedDevices").remove();
						$("#history-and-profiles").prepend($("<div></div>").attr('id', 'block--historyOfConnectedDevices'));
						$.nette.success(data);
						delegateAnchorActions($("#block--historyOfConnectedDevices"));
					}
				}
			});
		}

		function reloadProfilesOfConnectedDevices(force) {
			$.ajax({
				url: "{{ path("profilesOfConnectedDevices") }}",
				dataType: "json",
				success: function(data) {
					if (!$("#block--profilesOfConnectedDevices").length || force === true) {
						$("#block--profilesOfConnectedDevices").remove();
						if (data.snippets['block--profilesOfConnectedDevices'].trim() !== "") {
							$("#history-and-profiles").append($("<div></div>").attr('id', 'block--profilesOfConnectedDevices'));
							$.nette.success(data);
							delegateAnchorActions($("#block--profilesOfConnectedDevices"));
						}
					}
				}
			});
		}

		function updateConnectFormValues($el) {
			var data = $el.data();

			$("#form_host").val(data.host);
			$("#form_port").val(data.port);
			$("#form_user").val(data.user);
			$("#form_password").focus();

			$("#history-and-profiles").find('a').removeClass('active');
			$el.addClass('active');
		}

		function disconnectCallback(key) {
			unsetNotificationsForKey(key);
		}
	</script>
{% endblock javascripts %}

{% block title %}Connection management{% endblock title %}

{% block singleContentClass %}
	max-width-column
{% endblock singleContentClass %}

{% block leftColumnAdditional %}
	<div id="history-and-profiles">
		<script type="text/javascript">
//			setIndexActions();
		</script>
	</div>
{% endblock leftColumnAdditional %}

{% block state %}
	<form action="{{ path('_home') }}" method="post" {{ form_enctype(form) }} class="login">
		<legend>Connect to server</legend>
	    {{ form_widget(form) }}
	    <input type="submit" value="Connect" />
	</form>
{% endblock state %}

{% block config %}
	<h2>List of active connections</h2>
	{% if sessionConnections is empty %}
		<div class="alert info">
			You are not connected to any server.
		</div>
	{% else %}
		<table>
			{% for index,key in sessionConnections %}
				<tr id="row-{{ index }}">
					<td>{{ key.time }}</td>
					<td>{{ key.host }}</td>
					<td class="configure"><a href='{{ path("handleConnection", {"command": "get", "key": index } ) }}' class="ajaxLink"><span id="ico-conf"></span>Configure device</a></td>
					<td><a href='{{ path("handleConnection", {"command": "disconnect", "key": index} ) }}' class="ajaxLink" data-disable-history="true" data-callback="disconnectCallback({{ index }})">Disconnect</a></td>
				</tr>
			{% endfor %}
		</table>
	{% endif %}
{% endblock config %}
